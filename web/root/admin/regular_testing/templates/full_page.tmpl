[% title = "Scheduled Tests Configuration Tool" %]

[% INCLUDE header.tmpl %]

<script type="text/javascript">

var test_schedule_regexp = '(\\\\\*|2[0-3]|0[0-9]|1[0-9]):([0-5][0-9])( *, *(\\\\\*|2[0-3]|0[0-9]|1[0-9]):([0-5][0-9]))*';

function handle_reset_config() {
	handle_cgi_ajax_call('Reseting configuration...', 'Problem reseting configuration', true, 'reset_config');
}

function handle_save_config() {
	handle_cgi_ajax_call('Saving configuration and restarting services...', 'Problem saving configuration or restarting services', true, 'save_config');
}

function handle_lookup_host(test_id, keyword) {
	handle_cgi_ajax_call('Looking up hosts from community '+keyword+'...', 'Problem looking up hosts', true, 'lookup_servers', [ test_id, keyword ]);
}

function show_test(test_id) {
	handle_cgi_ajax_call(null, 'Problem looking up test', true, 'show_test', [ test_id ]);
}

function enable_test(test_id) {
	handle_cgi_ajax_call(null, 'Problem enabling test', true, 'enable_test', [ test_id ]);
}

function disable_test(test_id) {
	handle_cgi_ajax_call(null, 'Problem disabling test', true, 'disable_test', [ test_id ]);
}

function remove_test(test_id) {
	handle_cgi_ajax_call(null, 'Problem removing test', true, 'delete_test', [ test_id ]);
}

function add_test_member(test_id, address, port, description) {
	handle_cgi_ajax_call(null, 'Problem adding host to test', true, 'add_member_to_test', [ test_id, address, port, description ]);
}

function modify_test_member(test_id, member_id, address, description, test_ipv4, test_ipv6) {
	handle_cgi_ajax_call(null, 'Problem adding host to test', true, 'update_test_member', [ test_id, member_id, address, description, test_ipv4, test_ipv6 ]);
}


function remove_test_member(test_id, member_id) {
	handle_cgi_ajax_call(null, 'Problem adding host to test', true, 'remove_member_from_test', [ test_id, member_id ]);
}

function ps_toggle(obj) {
	var el = dojo.byId(obj);
	if ( el.style.display != 'none' ) {
		el.style.display = 'none';
	}
	else {
		el.style.display = '';
	}
}

function ps_show(obj) {
	var el = dojo.byId(obj);
	el.style.display = '';
}

function ps_hide(obj) {
	var el = dojo.byId(obj);
	el.style.display = 'none';
}

function close_dialog(dialog_name) {
	dijit.byId(dialog_name).destroyRecursive();
}

function modify_psb_bwctl_test(test_id, description, test_duration, test_interval, test_schedule, bandwidth_tester, protocol, window_size, udp_bandwidth, tos_bits, local_interface) {
	if (test_id) {
		handle_cgi_ajax_call(null, 'Problem updating test', true, 'update_bwctl_throughput_test', [ test_id, description, test_duration, test_interval, test_schedule, bandwidth_tester, protocol, window_size, udp_bandwidth, tos_bits, local_interface ]);
	} else {
		handle_cgi_ajax_call(null, 'Problem adding test', true, 'add_bwctl_throughput_test', [ description, test_duration, test_interval, test_schedule, bandwidth_tester, protocol, window_size, udp_bandwidth, tos_bits, local_interface ]);
	}
}

function modify_psb_owamp_test(test_id, description, packet_interval, packet_padding, session_packets, sample_packets, bucket_width, loss_threshold, local_interface) {
	if (test_id) {
		handle_cgi_ajax_call(null, 'Problem updating test', true, 'update_owamp_test', [ test_id, description, packet_interval, packet_padding, session_packets, sample_packets, bucket_width, loss_threshold, local_interface ]);
	} else {
		handle_cgi_ajax_call(null, 'Problem adding test', true, 'add_owamp_test', [ description, packet_interval, packet_padding, session_packets, sample_packets, bucket_width, loss_threshold, local_interface ]);
	}
}

function modify_pinger_test(test_id, description, packet_size, packet_count, packet_interval, test_interval, test_schedule, test_offset, ttl, local_interface) {
	if (test_id != null) {
		handle_cgi_ajax_call(null, 'Problem updating test', true, 'update_pinger_test', [ test_id, description, packet_size, packet_count, packet_interval, test_interval, test_schedule, test_offset, ttl, local_interface ]);
	} else {
		handle_cgi_ajax_call(null, 'Problem adding test', true, 'add_pinger_test', [ description, packet_size, packet_count, packet_interval, test_interval, test_schedule, test_offset, ttl, local_interface ]);
	}
}

function modify_traceroute_test(test_id, description, test_interval, test_schedule, packet_size, first_ttl, max_ttl, local_interface) {
	if (test_id) {
		handle_cgi_ajax_call(null, 'Problem updating test', true, 'update_traceroute_test', [ test_id, description, test_interval, test_schedule, packet_size, first_ttl, max_ttl, local_interface ]);
	} else {
		handle_cgi_ajax_call(null, 'Problem adding test', true, 'add_traceroute_test', [ description, test_interval, test_schedule, packet_size, first_ttl, max_ttl, local_interface ]);
	}
}

function minimal_granularity(time) {
	var granularity;

	if (time % 86400 == 0) {
		granularity = 86400;
	} else if (time % 3600 == 0) {
		granularity = 3600;
	} else if (time % 60 == 0) {
		granularity = 60;
	} else {
		granularity = 1;
	}

	return granularity;
}

function edit_test_member(test_id, member_id, address, description, can_test_ipv4, test_ipv4, can_test_ipv6, test_ipv6) {
	var title = "Configure Test Member";

	var dialog_id = "edit_test_member_dialog";

	var dialog_content = "";
	dialog_content += "<div id='configure_test_member_status' style='color:red'></div>";
	dialog_content += "<table>";
	dialog_content += "<tr>";
	dialog_content += "<td>Address</td>";
	dialog_content += "<td>";
	dialog_content += "<td colspan=2><input type='text' dojoType='dijit.form.ValidationTextBox' required='true' invalidMessage='All test members must have an address' id='configure_test_member_address' size='100' value='"+address+"'></input></td>";
	dialog_content += "</tr>";
	dialog_content += "<tr>";
	dialog_content += "<td>Description</td>";
	dialog_content += "<td colspan=2><input type='text' dojoType='dijit.form.ValidationTextBox' id='configure_test_member_description' size='100' value='"+description+"'></input></td>";
	dialog_content += "</tr>";
	dialog_content += "<td>Test IPv4</td>";
	dialog_content += "<td colspan=2><input type='checkbox' dojoType='dijit.form.CheckBox' id='configure_test_member_ipv4' "; if (test_ipv4 == 1) { dialog_content += " checked='checked'"; }; dialog_content+="/></td>";
	dialog_content += "</tr>";
	dialog_content += "<td>Test IPv6</td>";
	dialog_content += "<td colspan=2><input type='checkbox' dojoType='dijit.form.CheckBox' id='configure_test_member_ipv6' "; if (test_ipv6 == 1) { dialog_content += " checked='checked'"; };  dialog_content+="/></td>";
	dialog_content += "</tr>";
	dialog_content += "</table>";
	dialog_content += "<button dojoType='dijit.form.Button' id='configure_test_member_save'>Set</button>";
	dialog_content += "<button dojoType='dijit.form.Button' id='configure_test_member_cancel'>Cancel</button>";

	var dialog = new dijit.Dialog({ title: title, content: dialog_content, id: dialog_id });

	dojo.connect(dialog, 'hide', dojo.hitch(null, 'close_dialog', dialog_id));
	dojo.connect(dijit.byId('configure_test_member_cancel'), 'onClick', function() { dijit.byId(dialog_id).hide(); });

        var check_addresses_fn = dojo.hitch(null, function(address, can_test_ipv4, can_test_ipv6) {
		var curr_address     = dijit.byId('configure_test_member_address').attr('value');
		var test_ipv4   = dijit.byId('configure_test_member_ipv4').checked;
		var test_ipv6   = dijit.byId('configure_test_member_ipv6').checked;

                error_msg = "";
                if (curr_address == address) {
			if (test_ipv4 && !can_test_ipv4) {
				error_msg += address + " does not have an IPv4 address.";
			}

			if (test_ipv6 && !can_test_ipv6) {
				error_msg += address + " does not have an IPv6 address.";
			}
                }

                if (!test_ipv4 && !test_ipv6) {
			error_msg = "Must specify an address type to use";
                }

		dojo.byId('configure_test_member_status').innerHTML = error_msg;
        }, address, can_test_ipv4, can_test_ipv6);

	dojo.connect(dijit.byId('configure_test_member_ipv4'), 'onChange', check_addresses_fn);
	dojo.connect(dijit.byId('configure_test_member_ipv6'), 'onChange', check_addresses_fn);

	dojo.connect(dijit.byId('configure_test_member_save'), 'onClick', dojo.hitch(null,
				function(dialog_id, test_id, member_id) {
					var address     = dijit.byId('configure_test_member_address').attr('value');
					var description = dijit.byId('configure_test_member_description').attr('value');
					var test_ipv4   = dijit.byId('configure_test_member_ipv4').checked;
					var test_ipv6   = dijit.byId('configure_test_member_ipv6').checked;
					if (test_ipv4 || test_ipv6) {
						modify_test_member(test_id, member_id, address, description, test_ipv4, test_ipv6);
						dijit.byId(dialog_id).hide();
					}
					else {
						dojo.byId('configure_test_member_status').innerHTML = "Must specify an address type to use";
					}
				},
				dialog_id, test_id, member_id)
			);

	check_addresses_fn();
	dialog.show();
}


function display_bwctl_port_configuration_dialog(min_port, max_port) {
	var title = "Configure BWCTL Tests Port Range";

	var dialog_content = "";
	dialog_content += "<div id='configure_bwctl_tests_port_range_status' style='color:red'></div>";
	dialog_content += "<table>";
	dialog_content += "<tr>";
	dialog_content += "<td>Minimum Port</td>";
	dialog_content += "<td><input type='text' dojoType='dijit.form.NumberTextBox' required='true' invalidMessage='You must enter a whole number greater than 0' constraints='{min:1,places:0}'  id='configure_bwctl_tests_port_range_min_range' size='10' value='"+min_port+"' /></td>";
	dialog_content += "</tr>";
	dialog_content += "<tr>";
	dialog_content += "<td>Maximum Port</td>";
	dialog_content += "<td><input type='text' dojoType='dijit.form.NumberTextBox' required='true' invalidMessage='You must enter a whole number greater than 0' constraints='{min:1,places:0}'  id='configure_bwctl_tests_port_range_max_range' size='10' value='"+max_port+"' /></td>";
	dialog_content += "</tr>";
	dialog_content += "</table>";
	dialog_content += "<button dojoType='dijit.form.Button' id='configure_port_save'>Set</button>";
	dialog_content += "<button dojoType='dijit.form.Button' id='configure_port_cancel'>Cancel</button>";

	var dialog = new dijit.Dialog({ title: title, content: dialog_content, id: "bwctl_port_configuration_dialog" });

	dojo.connect(dialog, 'hide', dojo.hitch(null, 'close_dialog', 'bwctl_port_configuration_dialog'));
	dojo.connect(dijit.byId('configure_port_cancel'), 'onClick', function() { dijit.byId("bwctl_port_configuration_dialog").hide(); });
	dojo.connect(dijit.byId('configure_port_save'), 'onClick', dojo.hitch(null,
		function() {
			var min_port = dijit.byId('configure_bwctl_tests_port_range_min_range').attr('value');
			var max_port = dijit.byId('configure_bwctl_tests_port_range_max_range').attr('value');
			if (min_port > max_port) {
				dojo.byId('configure_bwctl_tests_port_range_status').innerHTML = "Minimum port must be smaller than maximum port";
			}
			else if ((max_port - min_port) < 1) {
				dojo.byId('configure_bwctl_tests_port_range_status').innerHTML = "Must specify at least two ports";
			}
			else {
				modify_bwctl_port_range(min_port, max_port);
				dijit.byId("bwctl_port_configuration_dialog").hide();
			}
		})
	);

	dialog.show();
}

function display_pinger_test_dialog(test_id, description, packet_size, packet_count, packet_interval, test_interval, test_offset, ttl, local_interface, test_schedule) {
	var title;
	var action;
	if (test_id) {
		title = "Edit Parameters Of Ping Delay Test";
		action = "Set";
	} else {
		title = "Add New Ping Delay Test";
		action = "Add";
	}

	var dialog_id = "add_test_dialog";

	var inter_test_unit = minimal_granularity(test_interval);
	var display_test_interval = test_interval/inter_test_unit;

	var dialog_content = "";
	dialog_content += "<table>";
	dialog_content += "<tr>";
	dialog_content += "<td>Description</td>";
	dialog_content += "<td colspan=2><input type='text' dojoType='dijit.form.ValidationTextBox' required='true' invalidMessage='All tests must be given a description' id='configure_test_description' size='100' value='"+description+"'></input></td>";
	dialog_content += "</tr>";
	dialog_content += "<tr>";
	dialog_content += "<td>Interface</td>";
	dialog_content += "<td>";
	dialog_content += "<select id='configure_test_local_interface' dojoType='dijit.form.FilteringSelect' autocomplete='false' >";
	dialog_content += "	<option value='' "; if (local_interface == "" || local_interface == null) { dialog_content += "selected" }; dialog_content += ">Default</option>";
        [% FOREACH iface IN interfaces %]
	dialog_content += "	<option value='[% iface.name %]' "; if (local_interface == "[% iface.name %]") { dialog_content += "selected" }; dialog_content += ">[% iface.name %] ([% iface.ips.join(", ") %])</option>";
        [% END %]
	dialog_content += "</select>";
	dialog_content += "</td>";
	dialog_content += "</tr>";
	dialog_content += "<tr>";
	if (test_schedule != "") {
	dialog_content += "<tr>";
	dialog_content += "<td>Test Schedule</td>";
	dialog_content += "<td colspan=2><input type='text' dojoType='dijit.form.ValidationTextBox' data-dojo-props=\"regExp:'"+test_schedule_regexp+"'\" required='true' invalidMessage='All tests must have a schedule of the form \"01:00, *:15, 23:00\"' id='configure_test_schedule' size='100' value='"+test_schedule+"'></input></td>";
	dialog_content += "</tr>";
	}
	else {
	dialog_content += "<td>Time Between Tests</td>";
	dialog_content += "<td><input type='text' dojoType='dijit.form.NumberTextBox' required='true' invalidMessage='You must enter a whole number greater than 0' constraints='{min:1,places:0}'  id='configure_test_test_interval' size='10' value='"+display_test_interval+"' /></td>";
	dialog_content += "<td>";
	dialog_content += "<select id='configure_test_test_interval_unit' dojoType='dijit.form.FilteringSelect' autocomplete='false' value='"+inter_test_unit+"'>";
	dialog_content += "	<option value='1' "; if (inter_test_unit == 1) { dialog_content += "selected='selected'" }; dialog_content += ">Seconds</option>";
	dialog_content += "	<option value='60' "; if (inter_test_unit == 60) { dialog_content += "selected='selected'" }; dialog_content += ">Minutes</option>";
	dialog_content += "	<option value='3600' "; if (inter_test_unit == 3600) { dialog_content += "selected='selected'" }; dialog_content += ">Hours</option>";
	dialog_content += "	<option value='86400' "; if (inter_test_unit == 86400) { dialog_content += "selected='selected'" }; dialog_content += ">Days</option>";
	dialog_content += "</select>";
	dialog_content += "</td>";
	dialog_content += "</tr>";
	}
	dialog_content += "<tr>";
	dialog_content += "<td>Packets Sent Per Test</td>";
	dialog_content += "<td colspan=2><input type='text' dojoType='dijit.form.NumberTextBox' required='true' invalidMessage='You must enter a whole number greater than 0' constraints='{min:1,places:0}' id='configure_test_packet_count' size='10' value='"+packet_count+"' /></td>";
	dialog_content += "</tr>";
	dialog_content += "<tr>";
	dialog_content += "<td>Time Between Packets</td>";
	dialog_content += "<td><input type='text' dojoType='dijit.form.NumberTextBox' required='true' invalidMessage='You must enter a number greater than or equal to 0.01' constraints='{min:0.01}' id='configure_test_packet_interval' size='10' value='"+packet_interval+"' /></td><td>Seconds</td>";
	dialog_content += "</tr>";
	dialog_content += "<tr>";
	dialog_content += "<td>Size Of Test Packets</td>";
	dialog_content += "<td><input type='text' dojoType='dijit.form.NumberTextBox' required='true' invalidMessage='You must enter a number greater than or equal to 0.01' constraints='{min:100,max:65536}' id='configure_test_packet_size' size='10' value='"+packet_size+"''/></td><td>Bytes</td>";
	dialog_content += "</tr>";
	dialog_content += "</table>";
	dialog_content += "<button dojoType='dijit.form.Button' id='configure_test_save'>"+action+"</button>";
	dialog_content += "<button dojoType='dijit.form.Button' id='configure_test_cancel'>Cancel</button>";

	var dialog = new dijit.Dialog({ title: title, content: dialog_content, id: "add_test_dialog" });

	dojo.connect(dialog, 'hide', dojo.hitch(null, 'close_dialog', 'add_test_dialog'));
	dojo.connect(dijit.byId('configure_test_cancel'), 'onClick', function() { dijit.byId('add_test_dialog').hide(); });
	dojo.connect(dijit.byId('configure_test_save'), 'onClick', dojo.hitch(null,
										function(test_id, test_schedule) {
											var description = dijit.byId('configure_test_description').attr('value');
											var packet_size = dijit.byId('configure_test_packet_size').attr('value');
											var packet_count = dijit.byId('configure_test_packet_count').attr('value');
											var packet_interval = dijit.byId('configure_test_packet_interval').attr('value');
											var test_interval = 0;
											if (test_schedule == "") {
												var test_interval_unit = dijit.byId('configure_test_test_interval_unit').attr('value');
												test_interval = dijit.byId('configure_test_test_interval').attr('value');
												test_interval *= test_interval_unit;
											}
											else {
												test_schedule = dijit.byId('configure_test_schedule').attr('value');
											}
											var local_interface    = dijit.byId('configure_test_local_interface').attr('value');
											var test_offset = 0;
											var ttl = 255;
											modify_pinger_test(test_id, description, packet_size, packet_count, packet_interval, test_interval, test_schedule, test_offset, ttl, local_interface);
											dijit.byId('add_test_dialog').hide();
										},
										test_id, test_schedule)
			);

	dialog.show();
}

function display_bwctl_throughput_test_dialog(test_id, description, test_interval, test_duration, tool, protocol, window_size, udp_bandwidth, tos_bits, local_interface, test_schedule) {
	// if we're displaying the 'edit' dialog
	if (test_id) {
		return __display_bwctl_throughput_test_dialog(test_id, description, test_interval, test_duration, tool, protocol, window_size, udp_bandwidth, tos_bits, local_interface, test_schedule);
	}

	var owamp_tests             = parseInt(dojo.byId('owamp_tests').value);

	// if pSB throughput tests are enabled and there are no latency tests that this new test will interfere with
	if (owamp_tests == 0) {
		return __display_bwctl_throughput_test_dialog(test_id, description, test_interval, test_duration, tool, protocol, window_size, udp_bandwidth, tos_bits, local_interface, test_schedule);
	}

	var title = "Warning: host isn't configured for throughput tests";
	var dialog_content = "";

	if (owamp_tests > 0) {
		dialog_content += "<p>";
		dialog_content += "<font color='red'>One-Way Latency tests are configured. Adding throughput tests can interfere with the one-way latency results</font>";
		dialog_content += "</p>";
	}

	dialog_content += "<button dojoType='dijit.form.Button' id='add_test_warning_add_test'>Add Test Anyway</button>";
	dialog_content += "<button dojoType='dijit.form.Button' id='add_test_warning_cancel'>Cancel</button>";

	var dialog = new dijit.Dialog({ title: title, content: dialog_content, id: "add_test_warning_dialog" });

	dojo.connect(dialog, 'hide', dojo.hitch(null, 'close_dialog', "add_test_warning_dialog" ));
	dojo.connect(dijit.byId('add_test_warning_cancel'), 'onClick', function() { dijit.byId('add_test_warning_dialog').hide(); });
	dojo.connect(dijit.byId('add_test_warning_add_test'), 'onClick', dojo.hitch(null,
										function(test_id, description, test_interval, test_duration, tool, protocol, window_size, udp_bandwidth, tos_bits, test_schedule) {
											dijit.byId('add_test_warning_dialog').hide();
											return __display_bwctl_throughput_test_dialog(test_id, description, test_interval, test_duration, tool, protocol, window_size, udp_bandwidth, tos_bits, local_interface, test_schedule);
										},
										test_id, description, test_interval, test_duration, tool, protocol, window_size, udp_bandwidth, tos_bits, test_schedule)
			);

	dialog.show();
}

function __display_bwctl_throughput_test_dialog(test_id, description, test_interval, test_duration, tool, protocol, window_size, udp_bandwidth, tos_bits, local_interface, test_schedule) {
	var title;
	var action;
	if (test_id) {
		title = "Edit Parameters Of Throughput Test";
		action = "Set";
	} else {
		title = "Add New Throughput Test";
		action = "Add";
	}

	var dialog_id = "add_test_dialog";

	var inter_test_unit = minimal_granularity(test_interval);
	var display_test_interval = test_interval/inter_test_unit;

	console.log("Granulairty: "+inter_test_unit);

	var dialog_content = "";
	dialog_content += "<table>";
	dialog_content += "<tr>";
	dialog_content += "<td>Description</td>";
	dialog_content += "<td colspan=2><input type='text' dojoType='dijit.form.ValidationTextBox' required='true' invalidMessage='All tests must be given a description' id='configure_test_description' size='100' value='"+description+"'></input></td>";
	dialog_content += "</tr>";
	dialog_content += "<tr>";
	dialog_content += "<td>Interface</td>";
	dialog_content += "<td>";
	dialog_content += "<select id='configure_test_local_interface' dojoType='dijit.form.FilteringSelect' autocomplete='false' >";
	dialog_content += "	<option value='' "; if (local_interface == "" || local_interface == null) { dialog_content += "selected" }; dialog_content += ">Default</option>";
        [% FOREACH iface IN interfaces %]
	dialog_content += "	<option value='[% iface.name %]' "; if (local_interface == "[% iface.name %]") { dialog_content += "selected" }; dialog_content += ">[% iface.name %] ([% iface.ips.join(", ") %])</option>";
        [% END %]
	dialog_content += "</select>";
	dialog_content += "</td>";
	dialog_content += "</tr>";
	if (test_schedule != "") {
	dialog_content += "<tr>";
	dialog_content += "<td>Test Schedule</td>";
	dialog_content += "<td colspan=2><input type='text' dojoType='dijit.form.ValidationTextBox' data-dojo-props=\"regExp:'"+test_schedule_regexp+"'\" required='true' invalidMessage='All tests must have a schedule of the form \"01:00, *:15, 23:00\"' id='configure_test_schedule' size='100' value='"+test_schedule+"'></input></td>";
	dialog_content += "</tr>";
	}
	else {
	dialog_content += "<tr>";
	dialog_content += "<td>Time Between Tests</td>";
	dialog_content += "<td><input type='text' dojoType='dijit.form.NumberTextBox' required='true' invalidMessage='You must enter a whole number greater than 0' constraints='{min:1,places:0}'  id='configure_test_test_interval' size='10' value='"+display_test_interval+"' /></td>";
	dialog_content += "<td>";
	dialog_content += "<select id='configure_test_test_interval_unit' dojoType='dijit.form.FilteringSelect' autocomplete='false' value='"+inter_test_unit+"'>";
	dialog_content += "	<option value='1' "; if (inter_test_unit == 1) { dialog_content += "selected='selected'" }; dialog_content += ">Seconds</option>";
	dialog_content += "	<option value='60' "; if (inter_test_unit == 60) { dialog_content += "selected='selected'" }; dialog_content += ">Minutes</option>";
	dialog_content += "	<option value='3600' "; if (inter_test_unit == 3600) { dialog_content += "selected='selected'" }; dialog_content += ">Hours</option>";
	dialog_content += "	<option value='86400' "; if (inter_test_unit == 86400) { dialog_content += "selected='selected'" }; dialog_content += ">Days</option>";
	dialog_content += "</select>";
	dialog_content += "</td>";
	dialog_content += "</tr>";
	}
	dialog_content += "<tr>";
	dialog_content += "<td>Test Duration<span id='configure_test_test_duration_help'><sup>[1]</sup></span></td>";
	dialog_content += "<td><input type='text' dojoType='dijit.form.TextBox' id='configure_test_test_duration' size='10' value='"+test_duration+"''/></td><td>Seconds</td>";
	dialog_content += "</tr>";
	dialog_content += "<tr>";
	dialog_content += "<td>Protocol</td>";
	dialog_content += "<td>";
	dialog_content += "<select id='configure_test_protocol' dojoType='dijit.form.FilteringSelect' autocomplete='false' value='"+protocol+"'>";
	dialog_content += "	<option value='tcp' "; if (protocol == 'tcp') { dialog_content += "selected='selected'" }; dialog_content += ">TCP</option>";
	dialog_content += "	<option value='udp' "; if (protocol == 'udp') { dialog_content += "selected='selected'" }; dialog_content += ">UDP</option>";
	dialog_content += "</select>";
	dialog_content += "</td>";
	dialog_content += "</tr>";
	dialog_content += "<tr id='configure_test_udp_questions' "; if (protocol != 'udp') { dialog_content += "style='display:none'" }; dialog_content += ">";
	dialog_content += "<td>UDP Bandwidth</td><td><input type='text' dojoType='dijit.form.TextBox' id='configure_test_udp_bandwidth' size='10' value='"+udp_bandwidth+"' /></td><td>Mbps</td>";
	dialog_content += "</tr>";
	dialog_content += "<tr>";
	dialog_content += "<td>Use Autotuning</td><td colspan=2><input type='checkbox' dojoType='dijit.form.CheckBox' id='configure_test_autotuning' "; if (window_size == 0) { dialog_content += " checked='checked'"; }; dialog_content+="/></td>";
	dialog_content += "</tr>";
	dialog_content += "<tr id='configure_test_noautotuning_questions' "; if (window_size == 0) { dialog_content += "style='display:none'" }; dialog_content += ">";
	dialog_content += "<td>Window Size</td>";
	dialog_content += "<td><input type='text' dojoType='dijit.form.TextBox' id='configure_test_window_size' size='10' value='"+window_size+"''/></td><td>Megabytes</td>";
	dialog_content += "</tr>";
	dialog_content += "<tr>";
	dialog_content += "<td>TOS bits (Enter value between 0 to 255)</td><td><input type='text' dojoType='dijit.form.NumberTextBox' data-dojo-props='constraints:{min:0,max:255}' id='configure_test_tos_bits' size='10' value='"+tos_bits+"' /></td>";
	dialog_content += "</tr>";

	dialog_content += "</table>";
	dialog_content += "<button dojoType='dijit.form.Button' id='configure_test_save'>"+action+"</button>";
	dialog_content += "<button dojoType='dijit.form.Button' id='configure_test_cancel'>Cancel</button>";

	var dialog = new dijit.Dialog({ title: title, content: dialog_content, id: "add_test_dialog" });

	var duration_tooltip_dialog_content = "";
	duration_tooltip_dialog_content += "For TCP Tests: ";
	duration_tooltip_dialog_content += "<br>If the latency to all hosts in this test are less than 50ms, a 10 second test is recommended";
	duration_tooltip_dialog_content += "<br>If the latency to any host in this test is greater than 50ms, a 20 second test is recommended";
	duration_tooltip_dialog_content += "<br>If the latency to any host in this test is greater than 100ms, a 30 second test is recommended";

	var duration_tooltip = new dijit.Tooltip({label:duration_tooltip_dialog_content, connectId:["configure_test_test_duration_help"]});

	dojo.connect(dialog, 'hide', dojo.hitch(null, 'close_dialog', 'add_test_dialog'));
	dojo.connect(dijit.byId('configure_test_autotuning'), 'onChange', function() { ps_toggle('configure_test_noautotuning_questions'); if (this.checked) { dojo.byId('configure_test_window_size').value = ''; } });
	dojo.connect(dijit.byId('configure_test_protocol'), 'onChange', function() { if (this.value == 'udp') { ps_show('configure_test_udp_questions'); } else { ps_hide('configure_test_udp_questions'); } });
	dojo.connect(dijit.byId('configure_test_cancel'), 'onClick', function() { dijit.byId('add_test_dialog').hide(); });
	dojo.connect(dijit.byId('configure_test_save'), 'onClick', dojo.hitch(null,
										function(test_id, tool, test_schedule) {
											var description = dijit.byId('configure_test_description').attr('value');
											var test_duration = dijit.byId('configure_test_test_duration').attr('value');
											var test_interval = 0;
											if (test_schedule == "") {
												var test_interval_unit = dijit.byId('configure_test_test_interval_unit').attr('value');
												test_interval = dijit.byId('configure_test_test_interval').attr('value');
												test_interval *= test_interval_unit;
											}
											else {
												test_schedule = dijit.byId('configure_test_schedule').attr('value');
											}
											var protocol = dijit.byId('configure_test_protocol').attr('value');
											var window_size = dijit.byId('configure_test_window_size').attr('value');
											var udp_bandwidth = dijit.byId('configure_test_udp_bandwidth').attr('value');
											var tos_bits = dijit.byId('configure_test_tos_bits').attr('value');
											console.log ("TOSBit Value:"+tos_bits);
											var local_interface = dijit.byId('configure_test_local_interface').attr('value');
											modify_psb_bwctl_test(test_id, description, test_duration, test_interval, test_schedule, tool, protocol, window_size, udp_bandwidth, tos_bits, local_interface);
											dijit.byId('add_test_dialog').hide();
										},
										test_id, tool, test_schedule)
			);
	dialog.show();
}

function display_owamp_test_dialog(test_id, description, packet_interval, packet_padding, loss_threshold, bucket_width, session_packets, sample_packets, local_interface) {
	// if we're displaying the 'edit' dialog
	if (test_id) {
		return __display_owamp_test_dialog(test_id, description, packet_interval, packet_padding, loss_threshold, bucket_width, session_packets, sample_packets, local_interface);
	}

	var throughput_tests        = parseInt(dojo.byId('throughput_tests').value);

	// if pSB owamp is enabled and there are no throughput tests that will interfere
	if (throughput_tests == 0) {
		return __display_owamp_test_dialog(test_id, description, packet_interval, packet_padding, loss_threshold, bucket_width, session_packets, sample_packets, local_interface);
	}

	var title = "Warning: host isn't configured for one-way latency tests";
	var dialog_content = "";

	if (throughput_tests > 0) {
		dialog_content += "<p>";
		dialog_content += "<font color='red'>Throughput tests are configured. Throughput tests can interfere with one-way latency results</font>";
		dialog_content += "</p>";
	}

	dialog_content += "<button dojoType='dijit.form.Button' id='add_test_warning_add_test'>Add Test Anyway</button>";
	dialog_content += "<button dojoType='dijit.form.Button' id='add_test_warning_cancel'>Cancel</button>";

	var dialog = new dijit.Dialog({ title: title, content: dialog_content, id: "add_test_warning_dialog" });

	dojo.connect(dialog, 'hide', dojo.hitch(null, 'close_dialog', "add_test_warning_dialog" ));
	dojo.connect(dijit.byId('add_test_warning_cancel'), 'onClick', function() { dijit.byId('add_test_warning_dialog').hide(); });
	dojo.connect(dijit.byId('add_test_warning_add_test'), 'onClick', dojo.hitch(null,
										function(test_id, description, packet_interval, packet_padding, loss_threshold, bucket_width, session_packets, sample_packets) {
											dijit.byId('add_test_warning_dialog').hide();
											return __display_owamp_test_dialog(test_id, description, packet_interval, packet_padding, loss_threshold, bucket_width, session_packets, sample_packets, local_interface);
										},
										test_id, description, packet_interval, packet_padding, loss_threshold, bucket_width, session_packets, sample_packets)
			);

	dialog.show();
}

function __display_owamp_test_dialog(test_id, description, packet_interval, packet_padding, loss_threshold, bucket_width, session_packets, sample_packets, local_interface) {
	var title;
	var action;
	if (test_id) {
		title = "Edit Parameters Of One-Way Delay Test";
		action = "Set";
	} else {
		title = "Add New One-Way Delay Test";
		action = "Add";
	}

	var dialog_id = "add_test_dialog";
	var packet_rate = 1.0/packet_interval;
	var packet_size = parseInt(packet_padding) + 20;

	var dialog_content = "";
	dialog_content += "<table>";
	dialog_content += "<tr>";
	dialog_content += "<td>Description</td>";
	dialog_content += "<td colspan=2><input type='text' dojoType='dijit.form.ValidationTextBox' required='true' invalidMessage='All tests must be given a description' id='configure_test_description' size='100' value='"+description+"'></input></td>";
	dialog_content += "</tr>";
	dialog_content += "<tr>";
	dialog_content += "<td>Interface</td>";
	dialog_content += "<td>";
	dialog_content += "<select id='configure_test_local_interface' dojoType='dijit.form.FilteringSelect' autocomplete='false' >";
	dialog_content += "	<option value='' "; if (local_interface == "" || local_interface == null) { dialog_content += "selected" }; dialog_content += ">Default</option>";
        [% FOREACH iface IN interfaces %]
	dialog_content += "	<option value='[% iface.name %]' "; if (local_interface == "[% iface.name %]") { dialog_content += "selected" }; dialog_content += ">[% iface.name %] ([% iface.ips.join(", ") %])</option>";
        [% END %]
	dialog_content += "</select>";
	dialog_content += "</td>";
	dialog_content += "</tr>";
	dialog_content += "<tr>";
	dialog_content += "<td>Packet Rate</td>";
	dialog_content += "<td>";
	dialog_content += "<select id='configure_test_packet_rate' dojoType='dijit.form.FilteringSelect' autocomplete='false' value='"+packet_rate+"'>";
	var rate_choices = [10, 50, 100, 250, 500, 1000];
	for(var i = 0; i < rate_choices.length; i++) {
	        var rate_choice = rate_choices[i];
		dialog_content += "	<option value='"+rate_choice+"' ";
                if (packet_rate == rate_choice) { 
		    dialog_content += "selected='selected'";
		}
		dialog_content += ">"+rate_choice+"</option>";
	}
	// if there was something not in the list of choices still present it
	if (rate_choices.indexOf(packet_rate) == -1){
	     dialog_content += "	<option value='"+packet_rate+"' selected='selected'>"+packet_rate+"</option>";
	}
	dialog_content += "</select>";
	dialog_content += "</td>";
	dialog_content += "<td>Packets Per Second</td>";
	dialog_content += "</tr>";
	dialog_content += "<tr>";
	dialog_content += "<td>Packet Size</td>";
	dialog_content += "<td><input type='text' dojoType='dijit.form.NumberTextBox' required='true' invalidMessage='The minimum size packet is 20 bytes (IP header). The maximum is 9000.' constraints='{min:20,max:9000}' id='configure_test_packet_size' size='10' value='"+packet_size+"''/></td><td>Bytes</td>";
	dialog_content += "</tr>";
	dialog_content += "</table>";
	dialog_content += "<button dojoType='dijit.form.Button' id='configure_test_save'>"+action+"</button>";
	dialog_content += "<button dojoType='dijit.form.Button' id='configure_test_cancel'>Cancel</button>";

	var dialog = new dijit.Dialog({ title: title, content: dialog_content, id: "add_test_dialog" });

	dojo.connect(dialog, 'hide', dojo.hitch(null, 'close_dialog', 'add_test_dialog'));
	dojo.connect(dijit.byId('configure_test_cancel'), 'onClick', function() { dijit.byId('add_test_dialog').hide(); });
	dojo.connect(dijit.byId('configure_test_save'), 'onClick', dojo.hitch(null,
										function(test_id) {
											var packet_rate = dijit.byId('configure_test_packet_rate').attr('value');
											var packet_size = dijit.byId('configure_test_packet_size').attr('value');
											var description = dijit.byId('configure_test_description').attr('value');
											var local_interface = dijit.byId('configure_test_local_interface').attr('value');
											var packet_interval = 1.0/packet_rate;
											var session_packets = 10800 * packet_rate; // 3 hours
											var sample_packets = 60 * packet_rate; // 1 minute
											var bucket_width = 0.0001;
											var loss_threshold = 10;
											var packet_padding = packet_size - 20;
											modify_psb_owamp_test(test_id, description, packet_interval, packet_padding, session_packets, sample_packets, bucket_width, loss_threshold, local_interface);
											dijit.byId('add_test_dialog').hide();
										},
										test_id)
		);

	dialog.show();
}

function display_traceroute_test_dialog(test_id, description, test_interval, packet_size, first_ttl, max_ttl, local_interface, test_schedule) {
	var title;
	var action;
	if (test_id) {
		title = "Edit Parameters Of Traceroute Test";
		action = "Set";
	} else {
		title = "Add New Traceroute Test";
		action = "Add";
	}

	var inter_test_unit = minimal_granularity(test_interval);
	var display_test_interval = test_interval/inter_test_unit;
	
	var dialog_id = "add_test_dialog";
	var dialog_content = "";
	dialog_content += "<table>";
	dialog_content += "<tr>";
	dialog_content += "<td>Description</td>";
	dialog_content += "<td colspan=2><input type='text' dojoType='dijit.form.ValidationTextBox' required='true' invalidMessage='All tests must be given a description' id='configure_test_description' size='100' value='"+description+"'></input></td>";
	dialog_content += "</tr>";
	dialog_content += "<tr>";
	dialog_content += "<td>Interface</td>";
	dialog_content += "<td>";
	dialog_content += "<select id='configure_test_local_interface' dojoType='dijit.form.FilteringSelect' autocomplete='false' >";
	dialog_content += "	<option value='' "; if (local_interface == "" || local_interface == null) { dialog_content += "selected" }; dialog_content += ">Default</option>";
	[% FOREACH iface IN interfaces %]
	dialog_content += "	<option value='[% iface.name %]' "; if (local_interface == "[% iface.name %]") { dialog_content += "selected" }; dialog_content += ">[% iface.name %] ([% iface.ips.join(", ") %])</option>";
	[% END %]
	dialog_content += "</select>";
	dialog_content += "</td>";
	dialog_content += "</tr>";
	dialog_content += "<tr>";
	if (test_schedule != "") {
	dialog_content += "<tr>";
	dialog_content += "<td>Test Schedule</td>";
	dialog_content += "<td colspan=2><input type='text' dojoType='dijit.form.ValidationTextBox' data-dojo-props=\"regExp:'"+test_schedule_regexp+"'\" required='true' invalidMessage='All tests must have a schedule of the form \"01:00, *:15, 23:00\"' id='configure_test_schedule' size='100' value='"+test_schedule+"'></input></td>";
	dialog_content += "</tr>";
	}
	else {
	dialog_content += "<td>Time Between Tests</td>";
	dialog_content += "<td><input type='text' dojoType='dijit.form.NumberTextBox' required='true' invalidMessage='You must enter a whole number greater than 0' constraints='{min:1,places:0}'  id='configure_test_test_interval' size='10' value='"+display_test_interval+"' /></td>";
	dialog_content += "<td>";
	dialog_content += "<select id='configure_test_test_interval_unit' dojoType='dijit.form.FilteringSelect' autocomplete='false' value='"+inter_test_unit+"'>";
	dialog_content += "	<option value='1' "; if (inter_test_unit == 1) { dialog_content += "selected='selected'" }; dialog_content += ">Seconds</option>";
	dialog_content += "	<option value='60' "; if (inter_test_unit == 60) { dialog_content += "selected='selected'" }; dialog_content += ">Minutes</option>";
	dialog_content += "	<option value='3600' "; if (inter_test_unit == 3600) { dialog_content += "selected='selected'" }; dialog_content += ">Hours</option>";
	dialog_content += "	<option value='86400' "; if (inter_test_unit == 86400) { dialog_content += "selected='selected'" }; dialog_content += ">Days</option>";
	dialog_content += "</select>";
	dialog_content += "</td>";
	dialog_content += "</tr>";
	}
	dialog_content += "<tr>";
	dialog_content += "<td>Packet Size</td>";
	dialog_content += "<td><input type='text' dojoType='dijit.form.NumberTextBox' required='true' invalidMessage='The minimum size packet is 20 bytes (IP header). The maximum is 9000.' constraints='{min:20,max:9000}' id='configure_test_packet_size' size='10' value='"+packet_size+"''/></td><td>Bytes</td>";
	dialog_content += "</tr>";
	dialog_content += "<tr>";
	dialog_content += "<td>First Hop to Report</td>";
	dialog_content += "<td colspan=2><input type='text' dojoType='dijit.form.NumberTextBox' required='false' invalidMessage='The minimum hop must be 0 or greater' constraints='{min:0}' id='configure_test_first_ttl' size='10' value='"+first_ttl+"''/></td>";
	dialog_content += "</tr>";
	dialog_content += "<tr>";
	dialog_content += "<td>Maximum Number of Hops</td>";
	dialog_content += "<td colspan=2><input type='text' dojoType='dijit.form.NumberTextBox' required='false' invalidMessage='The maximum hop count must be 1 or greater' constraints='{min:1}' id='configure_test_max_ttl' size='10' value='"+max_ttl+"''/></td>";
	dialog_content += "</tr>";
	dialog_content += "</table>";
	dialog_content += "<button dojoType='dijit.form.Button' id='configure_test_save'>"+action+"</button>";
	dialog_content += "<button dojoType='dijit.form.Button' id='configure_test_cancel'>Cancel</button>";

	var dialog = new dijit.Dialog({ title: title, content: dialog_content, id: "add_test_dialog" });

	dojo.connect(dialog, 'hide', dojo.hitch(null, 'close_dialog', 'add_test_dialog'));
	dojo.connect(dijit.byId('configure_test_cancel'), 'onClick', function() { dijit.byId('add_test_dialog').hide(); });
	dojo.connect(dijit.byId('configure_test_save'), 'onClick', dojo.hitch(null,
										function(test_id, test_schedule) {
											var description = dijit.byId('configure_test_description').attr('value');
											var test_interval = 0;
											if (test_schedule == "") {
												test_interval = dijit.byId('configure_test_test_interval').attr('value');
												test_unit = dijit.byId('configure_test_test_interval_unit').attr('value');
												test_interval *= test_unit;
											}
											else {
												test_schedule = dijit.byId('configure_test_schedule').attr('value');
											}
											var packet_size = dijit.byId('configure_test_packet_size').attr('value');
											var first_ttl = dijit.byId('configure_test_first_ttl').attr('value');
											var max_ttl = dijit.byId('configure_test_max_ttl').attr('value');
											var local_interface = dijit.byId('configure_test_local_interface').attr('value');
											modify_traceroute_test(test_id, description, test_interval, test_schedule, packet_size, first_ttl, max_ttl, local_interface);
											dijit.byId('add_test_dialog').hide();
										},
										test_id, test_schedule)
		);

	dialog.show();
}

function display_add_new_host_dialog(test_id, test_type) {
	var dialog_content = "";
	dialog_content += "<table>";
	dialog_content += "<tr>";
	dialog_content += "<td>Host</td>";
	dialog_content += "<td><input type='text' dojoType='dijit.form.TextBox' required='true' id='dialog_test_add_host_address'  value=''></input><br/>To enter multiple hosts, separate hostnames by comma. (No spaces in between host names)</td>";
	dialog_content += "</tr>";
	if (test_type == "pinger" || test_type == "traceroute") {
		dialog_content += "<input type='hidden' dojoType='dijit.form.TextBox' id='dialog_test_add_host_port'  value=''></input></td>";
	} else {
		var port;
		if (test_type == "bwctl/throughput") {
			port = '4823';
		} else {
			port = '861';
		}
		dialog_content += "<tr>";
		dialog_content += "<td>Port</td>";
		dialog_content += "<td><input type='text' dojoType='dijit.form.NumberTextBox' required='true' invalidMessage='The minimum port is 1, and the maximum is 65536.' constraints=\"{min:1,max:65536,pattern:'\#'}\" id='dialog_test_add_host_port' size='10' value='"+port+"''/></td>";
		dialog_content += "</tr>";
	}

	dialog_content += "<tr>";
	dialog_content += "<td>Description</td>";
	dialog_content += "<td><input type='text' dojoType='dijit.form.TextBox' id='dialog_test_add_host_description'  value=''></input></td>";
	dialog_content += "</tr>";
	dialog_content += "</table>";

	dialog_content += "<button dojoType='dijit.form.Button' id='configure_test_save'>Add</button>";
	dialog_content += "<button dojoType='dijit.form.Button' id='configure_test_cancel'>Cancel</button>";

	var dialog = new dijit.Dialog({ title: "Add Host To Test", content: dialog_content, id: "add_test_dialog" });

	dojo.connect(dialog, 'hide', dojo.hitch(null, 'close_dialog', 'add_test_dialog'));
	dojo.connect(dijit.byId('configure_test_cancel'), 'onClick', function() { dijit.byId('add_test_dialog').hide(); });
	dojo.connect(dijit.byId('configure_test_save'), 'onClick', dojo.hitch(null, function(test_id) {
												var address = dijit.byId('dialog_test_add_host_address').attr('value');
												var port = dijit.byId('dialog_test_add_host_port').attr('value');
												var description = dijit.byId('dialog_test_add_host_description').attr('value');
												handle_cgi_ajax_call(null, 'Problem adding host to test', true, 'add_member_to_test', [ test_id, address, port, description ]);
												dijit.byId('add_test_dialog').hide();
											}
											, test_id));
	dialog.show();

}
</script>

<div id="body" dojoType="dijit.layout.ContentPane">
[% INCLUDE body.tmpl %]
</div>

[% INCLUDE footer.tmpl %]
